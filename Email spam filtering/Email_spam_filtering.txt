(base) C:\Users\kaundanyachinmaya07>python
Python 3.7.0 (default, Jun 28 2018, 08:04:48) [MSC v.1912 64 bit (AMD64)] :: Anaconda, Inc. on win32
Type "help", "copyright", "credits" or "license" for more information.

# First importing the required modules

>>> import numpy as np

# data processing, CSV file I/O (e.g. pd.read_csv)

>>> import pandas as pd
>>> import warnings
>>> warnings.filterwarnings('ignore')

# importing the dataset that is emails.csv file

>>> dataset = pd.read_csv('C:\\Users\kaundanyachinmaya07\Desktop\emails.csv', encoding='latin-1')
>>> dataset.head()
                                                text  spam
0  Subject: naturally irresistible your corporate...     1
1  Subject: the stock trading gunslinger  fanny i...     1
2  Subject: unbelievable new homes made easy  im ...     1
3  Subject: 4 color printing special  request add...     1
4  Subject: do not have money , get software cds ...     1
>>>

# count observations in each label

>>> dataset.spam.value_counts()
0    4360
1    1368
Name: spam, dtype: int64
>>>

# for splitting dataset into train set and test set

>>> from sklearn.model_selection import train_test_split
>>>
>>> X_train,X_test,y_train,y_test = train_test_split(dataset["text"],dataset["spam"], test_size = 0.2, random_state = 10)
>>> print(X_train.shape)
(4582,)
>>> print(X_test.shape)
(1146,)
>>> print(y_train.shape)
(4582,)
>>> print(y_test.shape)
(1146,)
>>>

# for vectorizing words

>>> from sklearn.feature_extraction.text import CountVectorizer
>>>
>>> vect = CountVectorizer(stop_words='english')
>>> vect.fit(X_train)
CountVectorizer(analyzer='word', binary=False, decode_error='strict',
        dtype=<class 'numpy.int64'>, encoding='utf-8', input='content',
        lowercase=True, max_df=1.0, max_features=None, min_df=1,
        ngram_range=(1, 1), preprocessor=None, stop_words='english',
        strip_accents=None, token_pattern='(?u)\\b\\w\\w+\\b',
        tokenizer=None, vocabulary=None)
>>>
>>> print(vect.get_feature_names()[0:20])
['00', '000', '0000', '00000000', '000000000003619', '000000000003991', '000000000003997', '000000000005168', '000000000005411', '000000000005413', '000000000005820', '000000000006238', '000000000007494', '000000000007498', '000000000007876', '000000000010552', '000000000011185', '000000000012677', '000000000012735', '000000000012736']
>>>
>>> print(vect.get_feature_names()[-20:])
['zunaechst', 'zunf', 'zur', 'zurich', 'zusaetzlich', 'zuzana', 'zwabic', 'zwischen', 'zwlaszcza', 'zwrocic', 'zwwyw', 'zwzm', 'zxghlajf', 'zyban', 'zyc', 'zygoma', 'zymg', 'zzn', 'zzncacst', 'zzzz']
>>>
>>> X_train_df = vect.transform(X_train)
>>> X_test_df = vect.transform(X_test)
>>> type(X_test_df)
<class 'scipy.sparse.csr.csr_matrix'>
>>>
>>> prediction = dict()

# Naive Bayes Machine Learning Model

>>> from sklearn.naive_bayes import MultinomialNB
>>> model = MultinomialNB()
>>> model.fit(X_train_df,y_train)
MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)
>>>
>>> prediction["naive_bayes"] = model.predict(X_test_df)
>>>
>>> from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
>>>

# get accuracy

>>> accuracy_score(y_test,prediction["naive_bayes"])
0.9912739965095986
>>>
>>> print(classification_report(y_test, prediction['naive_bayes'], target_names = ["NSpam", "Spam"]))
             precision    recall  f1-score   support

      NSpam       0.99      1.00      0.99       861
       Spam       0.99      0.98      0.98       285

avg / total       0.99      0.99      0.99      1146

>>>
>>> def classify(user_input):
...     custom_train = [('text', [user_input])]
...     custom_train = pd.DataFrame.from_items(custom_train)
...     text = custom_train.iloc[:, 0].values
...     return model.predict(vect.transform(text))
...
>>> text = input('Type here something and see if it belongs to spam: ')
Type here something and see if it belongs to spam: IMPORTANT - You could be entitled up to Â£3,160 in compensation from mis-sold PPI on a credit card or loan. Please reply PPI for info or STOP to opt out.
>>>
>>> if classify(text):
...     print('spam')
... else:
...     print('Nspam')
...
spam
>>>
>>> text = input('Type here something and see if it belongs to spam: ')
Type here something and see if it belongs to spam: Hey there! I hope you're free tonight, let's catch up at dinner!
>>>
>>> if classify(text):
...     print('spam')
... else:
...     print('Nspam')
...
Nspam
>>>